---
# 语言
Language: Cpp
# 基于已有代码风格: LLVM, Google, Chromium, Mozilla, WebKit, ...
BasedOnStyle: Google
# 访问修饰符(public、private等)的缩进宽度
AccessModifierOffset: -1
# 左方括号后换行时,对齐括号
AlignAfterOpenBracket: true

# 允许重新格式化注释
ReflowComments: true
# 允许排序#include语句
SortIncludes: false

# 对齐连续的变量声明
AlignConsecutiveDeclarations: true
# 对齐连续的赋值语句
AlignConsecutiveAssignments: true
# 对齐连续的宏定义
AlignConsecutiveMacros: true
# 连续声明的变量名对齐
AlignEscapedNewlinesLeft: true
# 对齐连续的尾随注释
AlignTrailingComments: true
# 对齐转义换行符
AlignEscapedNewlines: Right

# 允许函数声明/定义的所有参数在放在下一行
AllowAllParametersOfDeclarationOnNextLine: false
# 对齐二元和三元表达式的操作数
AlignOperands: true

# 允许短的块放在同一行
AllowShortBlocksOnASingleLine: true
# 允许短的case标签放在同一行
AllowShortCaseLabelsOnASingleLine: false
# 允许短的函数放在同一行:
#   None(无), InlineOnly(定义在类中), Empty(空函数),
#   Inline(定义在类中，空函数), All(所有函数)
AllowShortFunctionsOnASingleLine: Inline
# 允许短的if语句保持在同一行
AllowShortIfStatementsOnASingleLine: false
# 允许短的循环保持在同一行
AllowShortLoopsOnASingleLine: false

# 始终在定义返回类型后换行
AlwaysBreakAfterDefinitionReturnType: None
# 始终在多行字符串之前换行
AlwaysBreakBeforeMultilineStrings: false
# 始终在定义返回类型后换行
AlwaysBreakTemplateDeclarations: false
# 允许函数调用中的参数打包
BinPackArguments: true
# 允许函数定义中的参数打包
BinPackParameters: true

# 在二元运算符前换行:
#   None(在操作符后换行), NonAssignment(在非赋值的操作符前换行),
#   All(在操作符前换行)
BreakBeforeBinaryOperators: None
# 在大括号前换行:
#   Attach(始终将大括号附加到周围的上下文), Linux(除函数、命名空间和类定义，与Attach类似),
#   Mozilla(除枚举、函数、记录定义，与Attach类似), Stroustrup(除函数定义、catch、else，与Attach类似),
#   Allman(总是在大括号前换行), GNU(总是在大括号前换行，并对于控制语句的大括号增加额外的缩进), WebKit(在函数前换行), Custom
#   注：这里认为语句块也属于函数
BreakBeforeBraces: Custom
# 在三元运算符前换行
BreakBeforeTernaryOperators: false

# 大括号换行，只有当 BreakBeforeBraces 设置为Custom时才有效
BraceWrapping:
  # class定义后面
  AfterClass: false
  # 控制语句后面
  AfterControlStatement: false
  # enum定义后面
  AfterEnum: false
  # 函数定义后面
  AfterFunction: true
  # 命名空间定义后面
  AfterNamespace: false
  # ObjC定义后面
  AfterObjCDeclaration: false
  # struct定义后面
  AfterStruct: false
  # union定义后面
  AfterUnion: false
  # catch之前
  BeforeCatch: true
  # else之前
  BeforeElse: false
  # 缩进大括号
  IndentBraces: false

# 在构造函数初始值列表的逗号前换行
BreakConstructorInitializersBeforeComma: false
# 每行字符的限制,默认80
ColumnLimit: 120
# 注释的正则表达式,用于确定哪些注释被解析为特殊注释命令
CommentPragmas: "^ IWYU pragma:"
# 构造函数初始值设定项:
# - true: 每个在新的一行
# - false: 全部在同一行或每个初始值一个单独的行
ConstructorInitializerAllOnOneLineOrOnePerLine: true
# 构造函数初始值设定项第一行的额外缩进宽度
ConstructorInitializerIndentWidth: 4
# 换行时续行的额外缩进宽度
ContinuationIndentWidth: 4
# C++11 初始化列表打包
Cpp11BracedListStyle: true
# 派生指针对齐
DerivePointerAlignment: true
# 禁用格式化
DisableFormat: false
# 启用实验性自动检测 BinPacking 的格式
ExperimentalAutoDetectBinPacking: false
# Foreach宏列表
ForEachMacros: [foreach, Q_FOREACH, BOOST_FOREACH]
# Case标签缩进控制
IndentCaseLabels: false

# 缩进宽度
IndentWidth: 4
# 函数返回类型换行时，缩进函数声明或函数定义的函数名
IndentWrappedFunctionNames: false
# 保留在块开始处的空行
KeepEmptyLinesAtTheStartOfBlocks: false
# 开始一个块的宏的正则表达式
MacroBlockBegin: ""
# MacroBlockBegin: '^*(define|undef|if|else|ifdef|ifndef|endif|include)'
# 结束一个块的宏的正则表达式
MacroBlockEnd: ""
# MacroBlockEnd: '^'
# 连续空行的最大数量
MaxEmptyLinesToKeep: 1
# 命名空间的缩进: None(无), Inner(嵌套的命名空间中的内容), All(所有命名空间中的内容)
NamespaceIndentation: Inner
# 使用ObjC块时缩进宽度
ObjCBlockIndentWidth: 4
# 在ObjC的@property后添加一个空格
ObjCSpaceAfterProperty: false
# 在ObjC的protocol列表前添加一个空格
ObjCSpaceBeforeProtocolList: true

# 在call(后对函数调用换行的penalty
PenaltyBreakBeforeFirstCallParameter: 19
# 在一个注释中引入换行的penalty
PenaltyBreakComment: 300
# 第一次在<<前换行的penalty
PenaltyBreakFirstLessLess: 120
# 在一个字符串字面量中引入换行的penalty
PenaltyBreakString: 1000
# 对于每个在行字符数限制之外的字符的penalty
PenaltyExcessCharacter: 1000000
# 将函数的返回类型放到它自己的行的penalty
PenaltyReturnTypeOnItsOwnLine: 60

# 指针和引用的对齐方式: Left, Right, Middle
PointerAlignment: Left
# C风格转换后是否添加空格
SpaceAfterCStyleCast: false
# 在赋值运算符之前是否添加空格
SpaceBeforeAssignmentOperators: true
# 在圆括号之前是否添加空格: Never, ControlStatements, Always
SpaceBeforeParens: ControlStatements
# 在空圆括号内是否添加空格
SpaceInEmptyParentheses: false
# 在拖尾注释之前的空格数(只适用于//)
SpacesBeforeTrailingComments: 2
# 在<尖括号>内是否添加空格
SpacesInAngles: false
# 在容器(ObjC和JavaScript的数组和字典等)字面量中添加空格
SpacesInContainerLiterals: true
# 在C风格的类型转换的圆括号内是否添加空格
SpacesInCStyleCastParentheses: false
# 在(圆括号)内是否添加空格
SpacesInParentheses: false
# 在<方括号>内是否添加空格，lamda表达式和未指明大小的数组的声明不受影响
SpacesInSquareBrackets: false

# 标准
Standard: Auto
# tab宽度
TabWidth: 4
# 使用tab字符: Never, ForIndentation, ForContinuationAndIndentation, Always
UseTab: Never
